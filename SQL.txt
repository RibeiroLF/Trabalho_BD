USE defaultdb;

CREATE TABLE funcionarios 
( 
 cpf BIGINT PRIMARY KEY,  
 nome VARCHAR(255),  
 sexo VARCHAR(255),  
 dt_nasc DATE,  
 uf CHAR(2),  
 cidade VARCHAR(255),  
 localidade VARCHAR(255),  
 bairro VARCHAR(255),  
 telefone VARCHAR(255)  
); 

CREATE TABLE situacoes 
( 
 cod_situacao INT PRIMARY KEY,
 nome_situacao VARCHAR(255) 
);

CREATE TABLE funcionarios_situacoes 
( 
 cpf BIGINT, 
 cod_situacao INT,
 dt_ini DATE,  
 dt_fim DATE,
PRIMARY KEY (cpf, cod_situacao)
);
ALTER TABLE funcionarios_situacoes ADD FOREIGN KEY(cpf) REFERENCES funcionarios (cpf);  
ALTER TABLE funcionarios_situacoes ADD FOREIGN KEY(cod_situacao) REFERENCES situacoes (cod_situacao);

CREATE TABLE funcoes 
( 
 cod_funcao INT PRIMARY KEY,  
 nome_funcao VARCHAR(255)  
); 

CREATE TABLE funcionarios_funcoes 
(  
 cpf BIGINT,
 cod_funcao INT, 
 dt_ini DATE,  
 dt_fim DATE,
PRIMARY KEY (cpf, cod_funcao)    
); 
ALTER TABLE funcionarios_funcoes ADD FOREIGN KEY(cpf) REFERENCES funcionarios (cpf);
ALTER TABLE funcionarios_funcoes ADD FOREIGN KEY(cod_funcao) REFERENCES funcoes (cod_funcao);

CREATE TABLE dependentes 
( 
 cpf BIGINT PRIMARY KEY,  
 nome VARCHAR(255),  
 telefone VARCHAR(255)  
);

CREATE TABLE funcionarios_dependentes 
( 
 cpf_fun BIGINT,  
 cpf_dep BIGINT,
 dt_ini DATE,  
 dt_fim DATE,
PRIMARY KEY (cpf_fun, cpf_dep)
);
ALTER TABLE funcionarios_dependentes ADD FOREIGN KEY(cpf_fun) REFERENCES funcionarios (cpf);
ALTER TABLE funcionarios_dependentes ADD FOREIGN KEY(cpf_dep) REFERENCES dependentes (cpf);

CREATE TABLE buffet 
( 
 id_buffet INT PRIMARY KEY,  
 dt_ini DATE,  
 dt_fim DATE,  
 refeicao VARCHAR(255)  
);

CREATE TABLE funcionarios_buffet 
( 
 cpf BIGINT,  
 id_buffet INT, 
 PRIMARY KEY (id_buffet, cpf) 
); 
ALTER TABLE funcionarios_buffet ADD FOREIGN KEY(cpf) REFERENCES funcionarios (cpf);
ALTER TABLE funcionarios_buffet ADD FOREIGN KEY(id_buffet) REFERENCES buffet (id_buffet);

CREATE TABLE pratos 
( 
 cod_prato INT PRIMARY KEY,  
 nome_prato VARCHAR(255),  
 acompanhamento VARCHAR(255),
 foto BLOB
);

CREATE TABLE buffet_pratos 
(  
 id_buffet INT, 
 cod_prato INT,
 PRIMARY KEY (id_buffet, cod_prato)   
); 
ALTER TABLE buffet_pratos ADD FOREIGN KEY(id_buffet) REFERENCES buffet (id_buffet);
ALTER TABLE buffet_pratos ADD FOREIGN KEY(cod_prato) REFERENCES pratos (cod_prato);

CREATE TABLE bebidas 
( 
 cod_bebida INT PRIMARY KEY,  
 nome_bebida VARCHAR(255)  
); 

CREATE TABLE buffet_bebidas 
( 
 id_buffet INT,   
 cod_bebida INT,
 PRIMARY KEY (id_buffet, cod_bebida)  
); 
ALTER TABLE buffet_bebidas ADD FOREIGN KEY(id_buffet) REFERENCES buffet (id_buffet);
ALTER TABLE buffet_bebidas ADD FOREIGN KEY(cod_bebida) REFERENCES bebidas (cod_bebida);

CREATE TABLE ingredientes 
( 
 cod_ingrediente INT PRIMARY KEY,  
 nome_ingrediente VARCHAR(255),  
 unidade VARCHAR(255)  
); 

CREATE TABLE pratos_ingredientes 
( 
 cod_prato INT, 
 cod_ingrediente INT, 
 PRIMARY KEY (cod_prato, cod_ingrediente)  
); 
ALTER TABLE pratos_ingredientes ADD FOREIGN KEY(cod_ingrediente) REFERENCES ingredientes (cod_ingrediente);
ALTER TABLE pratos_ingredientes ADD FOREIGN KEY(cod_prato) REFERENCES pratos (cod_prato);

CREATE TABLE estoque_ingredientes 
( 
 cod_ingrediente INT PRIMARY KEY, 
 qtd_ingrediente INT  
); 
ALTER TABLE estoque_ingredientes ADD FOREIGN KEY(cod_ingrediente) REFERENCES ingredientes (cod_ingrediente);

CREATE TABLE fornecedores 
( 
 cod_fornecedor INT PRIMARY KEY,  
 nome_fornecedor VARCHAR(255), 
 telefone VARCHAR(255), 
 dt_ini DATE,  
 dt_fim DATE 
); 

CREATE TABLE ingredientes_fornecedores 
( 
 cod_ingrediente INT,  
 cod_fornecedor INT,
 PRIMARY KEY (cod_ingrediente, cod_fornecedor)
);
ALTER TABLE ingredientes_fornecedores ADD FOREIGN KEY(cod_ingrediente) REFERENCES ingredientes (cod_ingrediente);
ALTER TABLE ingredientes_fornecedores ADD FOREIGN KEY(cod_fornecedor) REFERENCES fornecedores (cod_fornecedor);

CREATE TABLE bebidas_fornecedores 
( 
 cod_bebida INT,  
 cod_fornecedor INT,
 PRIMARY KEY (cod_bebida, cod_fornecedor)
);
ALTER TABLE bebidas_fornecedores ADD FOREIGN KEY(cod_bebida) REFERENCES bebidas (cod_bebida);
ALTER TABLE bebidas_fornecedores ADD FOREIGN KEY(cod_fornecedor) REFERENCES fornecedores (cod_fornecedor);

CREATE TABLE ingredientes_compra 
( 
 id_compra INT,
 dt_compra DATE,  
 qt_compra INT,  
 vl_compra DECIMAL,
 cod_ingrediente INT,
 cod_fornecedor INT,
 PRIMARY KEY (id_compra, cod_ingrediente)   
); 
ALTER TABLE ingredientes_compra ADD FOREIGN KEY(cod_ingrediente) REFERENCES ingredientes (cod_ingrediente);
ALTER TABLE ingredientes_compra ADD FOREIGN KEY(cod_fornecedor) REFERENCES fornecedores (cod_fornecedor);

-- VIEW
CREATE OR REPLACE VIEW buffets AS  
SELECT B.id_buffet, B.dt_ini, F.nome AS responsavel, B.refeicao, P.nome_prato, P.acompanhamento, BE.nome_bebida  
FROM buffet B  
LEFT JOIN funcionarios_buffet FB ON (B.id_buffet = FB.id_buffet)  
LEFT JOIN funcionarios F ON (FB.cpf = F.cpf)  
LEFT JOIN buffet_pratos BP ON (B.id_buffet = BP.id_buffet)  
LEFT JOIN pratos P ON (BP.cod_prato = P.cod_prato)  
LEFT JOIN buffet_bebidas BB ON (B.id_buffet = BB.id_buffet)  
LEFT JOIN bebidas BE ON (BB.cod_bebida = BE.cod_bebida)  
WHERE B.dt_fim IS NULL; 

-- PROCEDURE
DROP procedure IF EXISTS atualizarEstoquePorCompra; 
DELIMITER $$  
$$ CREATE PROCEDURE atualizarEstoquePorCompra (IN p_cod_ingrediente INT, IN p_qt_compra INT)  
BEGIN  
-- Verifica se o ingrediente já existe no estoque  
IF EXISTS (SELECT 1 FROM estoque_ingredientes WHERE cod_ingrediente = p_cod_ingrediente) THEN  
-- Se existe, atualiza a quantidade somando a nova compra  
UPDATE estoque_ingredientes  
SET qtd_ingrediente = qtd_ingrediente + p_qt_compra  
WHERE cod_ingrediente = p_cod_ingrediente;  
ELSE  
-- Se não existe, insere um novo registro no estoque  
INSERT INTO estoque_ingredientes (cod_ingrediente, qtd_ingrediente)  
VALUES (p_cod_ingrediente, p_qt_compra);  
END IF;  
END$$ 
DELIMITER ; 
